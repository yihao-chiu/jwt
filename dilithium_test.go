package jwt_test

import (
	"os"
	"strings"
	"testing"

	"github.com/yihao-chiu/jwt/v5"
)

var dilithiumTestData = []struct {
	name        string
	keys        map[string]string
	tokenString string
	alg         string
	claims      map[string]interface{}
	valid       bool
}{
	{
		"Dilithium2",
		map[string]string{"private": "test/dilithium2-private.pem", "public": "test/dilithium2-public.pem"},
		"eyJhbGciOiJEaWxpdGhpdW0yIiwidHlwIjoiSldUIn0.eyJmb28iOiJiYXIifQ.AiZOxUJPKssGXyGVyQSYfcleJrzQmWjDow3BeJOaCpeb8qdrNj-uPtXs2MHdDYV502Bb2mvA7mirdrV5ToDz07gZFZ8BVNF2E3ocxmQhU0aGSpICRbeCOib9Qpld1IMk7iBhX0Np21w1bqCpb3F9AM309-VwFOnbOzceSLpbzL-4F6klr5Aj3gtPUQT7MYYWfFWOyXHgohaXa1Xr7VRCy3SVH5I5i86uQhyhZ2q13x5LUUbS83gJpIqzihRman7ut-K2h5Q_t-kVPR1NRumIwLa6hG02CBhp_79Nkikg79C1EuHoOLUDB9q6T5HNHfM3l7_4kjZkVB-IHciA1Gc74hsDusm2Sr92TTtiHwgCxInYV7LaCrrQdDniY9hDuYt27LrBbDXr3HZiV8ZceWu_7-I3qZgUM6g3kg0hERl1jsDY6hifjlsknOcow_KyD-JO7igkLj41dyuADhv5gGYL1IMVL3DptCNOaOhCyOfx9bhIHaR0H-GoUvnOkc69tqMlduk2e_J4VsR4RgJLWwCsuZBpT1RFJlId7aCTcUrRF8Wr8vXJipdsqZGXQDOaSFgxOlGW0IsF720Ks5-0SgPII2S_xeOASCq0FQ-rGisVsT_EkWbedpgS8G6zz5BQsPypg5NF8TsLDWcsZAIniapE9xp3GJyoqgtB33sMrahec0vVLbItxUubK6s5CFsymXCe8UvnxdvSV5JJaiwPbma6s59woa-pfB0fcoDErva6uGQWVTqt6XFVKG8-lh7foQG_O6__qto9Q1NG-vzv8HcGXprUU125vJHITZRfgbcV45oQi9RMcju1rpwcaNwQPVmlwctCRs3F-RxF26x7UVUsWdk1G3SUeb_8W8K1B8wpULZF-eLIIPBb1fS3lt7MJkuQVejJlS4ep0X6gW_fqLWnZHty9Nqp3he9rkQYTl_MmY6PXjYE4GE85hLkqNsNyrYB4ebvtY6ern4hWLOUmsqD4rMFFfGn0NrYfwCPa6gfJhGpJN1O1mRO3wlYfvlKAgOlR8_KMS64boQc6vxG2ixOa5x1-34tamc4gVjlr784xGksLK5yxYv8I83CF_LdEZX__UYBapK8NoRvlmhmLXOeM5hky2G0GlNqUEPpTk0JecybTjPKuah4nAR2Vvq0VK7UAH3mK5A9Lz0mAReKF5ORtxEY0xKB0VO-w019DXqTOk21gVTWjP285p2BYrXIITNHI8kv8WPiQbx69dO31bRgRi28AGWrqppQwdPrTp8QSNcNJlsg4CtRBzrmFsbYzwUVa2kKIMBwaKPJPiYez3ZqdrfuWVCOYWU0VGJiWw8UTeD2g0TVM8SzTs5rBBjgTPkrVA3CXT2JeEcev8alTkF2BmH1FAEbieWgsk-Vtcd239KBgYQRhb9837nPQEP4XjRkyqroQl-TNGPVbf1GZiTO8oG46-pUYeoylyvg3ChyzSJl2Rim1kr0Q_Cb7tttOE7lXmOtWtVxgOsdJKgNFWIRJ5G2O0xm1Si1Q6JTiDixlcyQxNnzuuxI24ZPtGYr0gHHCYQ222vmrW0E4_t5C12Lo-DQiKrPCi3Enr3Bw6qif3zqlv7bk_QK3uX6MZQyNC1JKp_i8yj2zKBldstYQ1KhY-LuLrzu7DvPkmPZ4og7zq4rcukL-6ZNf9Z0QF1eSckX9TlyuxMr3QJVC3PDf-G24EYGTnCNyR8ok4FtO4Gxq7__1lR8gyFiVcBhZF6_qZnxXiWluvGNFbD0De4UYq22RjmZDUUyU3oqRFOwjKuN_ewNN1g0GYaXfPfB51FmHhbpQ62JHIXzUyuTkTyqwag3S_Pe96bhbVeA0YL8Y0mnkc9KPp7-9DxZwfSNCeTCabg6eXVy1YTFju9-x27NIu0bCkMrLQqv-Vjz1Ecfx_aOiiS8Ki4oUwtTqwRKVCiRaUc7aOQGl8dOA_gEQ8sIdltY7N7BNExgSF91aquU2OjagrJCMeKWuqchxTxl6wiATpwrkLGRW09FOWEFku_RszTEHWZjzIrfyyUifyvwaIE_YD3NNu1yV5YnJixyKb5j1ngBnbB3tA1tYxNsB3JeRTea63-P9UbUMkg3aALPdE3-Lrou9pVok3iZsmP_rA_D6BCkE5h5_WSW4uFq7h7MpNoiNm8tJ8yDhr29z3NFVCkLeowjD-6FJX4ynYcOMtPvP2LvEg9726e1JeP2tFWbV0iaMizVUpF9BF4x0g6JWJKM01OPXo-Z2mqNZ8LqPkJFW66YfVLJoVlCqpVV1-eG6ADjLiMfBlnpN3lu-SgfBZfi1t3tR4SiU37_6BiQDW5VpFWF4c69WqarWbKTv_2so2FH-CxTgtomtCGzlUr71chNAY9PtXmlUJPqsExUpl8vXlaS_2o-WQqOgnVKcAFViit-tB3z8dCDD40KEWA5eqEH-keS46qsy4gTrCcz2mnmF0nFMVC2eg58a6kinCgHIGFV5a6Yi1kFmnsybIaj0vXu1sw6okq8zZy_mD2q-K1FK3EBFnTiSQt-X5HuPkCzTItFrB8YNUuYe4jMjT3BymZEmkgGZ4q9YjHpxgtWUB2MAf2CW1mGcV43FzFvLDclm4mGQOxntQ6kKIRSlkgpqLFipDrZrm5HV6xa9A8-asD0UrabCEvzB4iA4r5XRxb1gLcLrb-Je1Q9n6knwzhm_fJ0z1A3WLLGPilquaLsLUpF2lGG3o2awu7THlm41zXhUG5MD7zAORfvUqRqz-9jz0xe3fY-qCsM62jLHHf4uc30s3pMszrKuxej4XfYcHuvqlu_Li-Pg6CZNtYcUrrQMknuBV1PiIF3LpYbFIvKBPo32uksnglp9EewOLaacFeNA_ReKML_y2idVGEnOsSww0ONxCRosecqyHcU4QVeDfCT2Q7gUdPXN-ukREiR3V5kaL_bxXArs-nrmNqMkQPJ71oIhbv0fR4GKohGlYW5daZ4kiMuRfbVWwGsVNxHUdEP6ry21Vy3pyFeqTYeyiZyLpGxe1HSOGb6_PVDCr0bwV8GiD1f5hQTlFBRs2CCYV5kugesFI_8F3bId6sfojE0uLcVYOf6JpizQaBG-yr-tDCnSsv2k0HP1h9h20_mAjayAxaQaGyztYCmdgHq7muga4OZQvwEGy8yT295jJSku9Xs7vsNGRwxQFdel568ysvO0NPnAyAnLjpPWV5jd3iKmbG12OvwLklLTWFxeanB1OTn9vv8AAAAAAAAAAAAAAAAAAAAAA8fMUA",
		"Dilithium2",
		map[string]interface{}{"foo": "bar"},
		true,
	},
	{
		"Dilithium3",
		map[string]string{"private": "test/dilithium3-private.pem", "public": "test/dilithium3-public.pem"},
		"eyJhbGciOiJEaWxpdGhpdW0zIiwidHlwIjoiSldUIn0.eyJmb28iOiJiYXIifQ.gJ_GVy72K0I3cCVlrX4KYKk2dFaowiYNKB1aDVhG5oPcQ0YlZ9rHYtPbLsjVWwyonXJu_7auEJmhtmog4l90ddCcxVDycUZifarKL-BkXRhfiXPWLCE8DIgAWknYl3fIqWp4_1okYbRXBpdTLQ3RFnWIu7hnI4rGXgvTC8KWeZ6dguN1DssMsHkkdb3Rba9yc1mtE8lA6v4INznlHQmaKeavgtyJ587L4pI0FTjPALI3JEMNARbHRrUi7ZnOG7Hdmchxfpv2lNJThXf_CSyEuaxbFyRRW_n7dD9Sl28cNVi5m93rHz6D4lFEyR4-LYujNOmykTSIQtZOylYHcKNJYbnP2hqbp8GOAFJPBkdJG0kZ8oMPYNn-qLPv1OdKof_SSJQAEWyIFJEH9F9ZLCcIJeu2tjB70tM6PI-ElNY77CKHFYhoIsDTgWCfsgOCgQqMz9e1fUFuf7Z8GqUgRJQdc_YE-PuPDOE6zEd_f4AfMRoYk7Sw5ftE_HYHhKLhBMEnRTLI-XVLQ70XCC7ADsg_ca84A-PgU5z8hP9I1D7_cyqxxuxUdowltYQCuDeYeni9eIzS7zraTezSnzZA8Kru1Pm8llhpUvomKTFyejDYrOUPwatvtJpaCAMjHh9x1SkPrFpq1Gxt3JhS8eXZqufejZuCsUaHWs_mwvpDVTvSS6mQ6TVHFG3O_bcfgfptpRWnXDjNxomeCxT6gsVzo4j3c9rCWY692wCkpWvENx76J_HK9XLlwjTZRDpqMJWaFmw198SHJ-sU40-bgTwhPJS0Sapuj7lrjSjtnz4WhMw0fxW8r2JSPJAAzjoLqvLjw1TyOBxGfSNs8e1Kg7vmoo6vZn0Goo6IpmH6WBqB80whxN1s3WhiwhgUUk8Hy1E0hk7oYVGffBs2DPnaOka8Xjc4L1fXGZEgOf1EBGtnA77MqfMTldbc0z8q7fD4g9EGixTNxl9LXlfqk7B1sYKJgbb3dMDGw-2GNuG6nPgydKBxCXu3dmj-D6crqh0-0_yFInzIVLnx04q_Lmal_2A66Stx5E2F8Vmn2ylr5Ciyye06oAh7W8ckJsQaEj0JSNNAFVI5RefnjLMVkocdR9f5fNEjW-JTh-lrDRbxAKJezhNNFKho3-y2qKgLkJS2brhQArzKxMp76lk4ixTcicmKvc9RdSVj5GgIPLK4r4XzXUT7XSf_abs8N2umlyzOuhnOBdYbH_mROrJNKtFF8OX9fw8k4kZtH2si8b1TP8JysUHmYzjC9tB-NhlC0O8j4k7z8h8tcgm7iQUl8XyLzTIXA3sUvpDqCpq82sQoBIb1QNEb33CvNOEc48AvkGeNR4ac-Hc-BUgfmXl1QdjfcWABE3GzAxR1VRM9_MIdj6Y6bTR3bfpwjjOgjIBW_bdP5H-JFNuI_JDSQJ9RQXU1mlZ3_dBg65oNVgBFwXEV3nKDylx53_KcJStpSdwD6YxR9BKDcM3S6FZA69Gr0CxCc28tLWI1ODB3lgOdcMecyAYvFRmOb_GK-hs6l1t40Bv0fejpuYplVot7tjH4ObWkPEbyub1prFeISkA_oCeSfAC7gsOkYvd5gsV-T0ntygTljr_J8V2bNXWjNMAO1kMghSAjM3Tz7mG9Pf5ReOb4qau1tVD1Zusz-8w95BxhGfM6_kUj6X0MqFt95-FOyUs0s7n8-43ScDHP8xm_Ur-sziblHbJHNUQ1YeB59HCdUHgvoKZeC9le9S9NkGu9lBMZwDTfs4Pysl268Qa1NV7X5z0wwJ-t0iQRAbP28Jkm4KqloF9dMeg6I9hSjDtKh3JK5h1v4-HbGwUXGRmKJeG7E42XwxHqOG4XPTYLCgLxhZ4TYElp5JqmeU0W2ux0XnNEgvzkjmnJP7-qrTCHMs7bi4kl_qI66tgnJNtSseMsY9wU_x6q-h_OGiSwhntfrr-Gp6xFH-vq2ZR-CZkrRRICUTy3JRsURSMEN3KeCy4F9tKQAzFr7o5mfrc-nYpWbkR8unqi4uPL1SKAMZidi5Qs8b36bKeO4CTMA6lZ0x1734P6BlM0Kw5MQ_DWruZ4M44ajxMJrji4gxgkSa07IMd7aEPnKTBl97zVFDl_s45Z6uEjxUT6bOGmbX8fualEUwAWZvAsd3ShIUIdlL55NqQbnoAynLRFm5VARUFWbMjoeKlo593z0RpgX54-ElzIsXRJxw5t0XMxPDWpUsiZb9fUKxqfxxY0zHNGcFp4zyIkAL_YAwtF_8YEsmhc77ExsHmoJq3pdORRILv7pY7I1IfhSNQk4-CSVZ41k_EhVI20SrPDCK3mZCDvRl6BkpjEZtA-gjreDVSXe8YnXO_kpaAzbBf1P7_gNE8DoS6Mgq74ZLFbxgu8dUDr5TJVdy9RQaIE4Vo1nTHZgx--ZSdNZX09OU07TvVgN3Csqs_5MBqq2A5jx2QwZL5qr8YMScrFDFcTskdhOH-KUC4cbaxBe-PbkMPPFsFH_EWcmTYnvMQIMM1Ln4gl1tKc014tkPp4GWClGHPGnQG7en_pGItPBps8Eql7w12x-acFBNcd-ldbiSgeRxMEcEkDXJ3NX84NnPGMg4Yyo-UpbAp17MURweU9dIB2gPNL9EMe28hu-ml20hwXiU5nHZ3jjBYxi9yXnkSJSPOPZJWgoeMwgn4ktevPwCQQjM9IEjARRixTt3qaOW94m4-sUB2hYcNqpUa3eOccs6ScTIjAA8IleEKyQawsrg3Vx9_oaabdh2u4RpRmXIJ3NFetuJWkT_umYFiCFCgnJtTgDTmNXkchNvyB0UFmaPrMqvSg9okZylDRD0CLB16zQetRrjZcVzr_xs7x4JkhmEH3rF0tEfYHzPl5dBQEjuvhfaYSaRKQBXyocR9665sSkCsDiP58FgHHX401oztrwVY8Z3oXmhsE93bSk4qmAiXwHVw2p3GgrZ2m0MfMDjpXDQcSMLSxtAnWHyA_SjRwjE4NY05eJGiW-WQmtM3UBaEGQ-ZwhCpPg3-ar3lU7IbFJTNoOuJTVjmBUd1SC_KoHV4r0oifRvzF4kdwm_g0YQLpf6dlVttA8EWiyAjriwDnN_Gu5BnDrqHJ01wZYpa8h_vfyp7c2ta2vemrOYEVoN9fkP4YmarIdXk5M1C-L4mfdcmEAZg2Wve19o3CvyLt9XWDLgo5hboDcC7w_3u1mX-XAdjNisg4wG0sCmO6yz_Rx10PtLN8emqEISp4MY70Bn9HS5NgBhjxvU8PJCbR4GLUDNBQm17P8qsUioTpMwRUeEEmyjo1CdIRvzNwG0t9316kqlnbTRYvHBJZyb29gkWbgnVjQo3pzabVhfBU2-CifFLFx-waCJYZhSyTzOA4OmtW_O9oL_z_2trHLHci_tUaebPv1c65vNJ2ZxQt7LEWkibuYFs4FLWqhjOkW4RGVzzkiGj0wZk4USjlMW0L5zxbE3_tEwORZISibLWN1OMHfEA86bTZa7kquXQH2J72wXoh829DF4XgsUrXcZq3TfcY_SHqU7Z37mDLrbWtc8QA2X08WoBJp0FX8w2a-9epDeaWOqzkUZIkJfyp08p2CRy-532Lgb1ACS_SFkgEowL5Q2zMISvpWay5JQQfPaqs9pSo84KNZ4O2lX3WssSb6_DAnC5UStoM4IDwmAMm76pmGUFOQpYi9UI1NO274dV3S-coOP0Fdrfrej3TuovIr3MA6MCXQKanzzaMSMR_mxiDOnNsJNQZlobm5WJunk_d2my-rbvEb1PEyZ63huKAPP0xHUGtyXHb_efM7coe4TE4PDtL213OMAEOtbf1-JuFabdrHgzHDwA3tZku4l9Dnj8FQvi9kPZgEnXFikCzUfFDuL3MSc3l-eaE4Y-g3_DxvKufPVAxFXYA5sv8c1xdper12ryDjlHu3DelTpLo9m4p4FodEFq3_p_mMbEXe42zpVFyviSxJd_WqYdlYzVHqa2qzOvXtijV0-OE-Nuw5_WiWlwTKrNhpzsgas_Txhby65FRzUqHLirwsOPvXVwC5zN6EOGgxCnCnn63Rd582FsKaiOLusBCkKLh1vmMft3xXUgYaiqYaMAZ16KxwIburDIj1a9yT_I-qamukvz4xPIRw7UhbTmsb2-Id4opYDL4-_tyb1wThqjMbv9GvdNpFmLY7tqtJgDvNeFYSxD6ONEC4dQHwOp6MtTFIdGGaspefOcBSHs2OqEtcXyEnJS7dqtFwMdwuozoSKZQu7MOkJ874cECs4mIscOJ_8IP8xNg-BfHvK1Z1eJrxuFZC67IXVou2vcp8ckhIi46JXmTbdFgxa-7uKkap_u6dawAAfgwVn7XloBAZA8XJpXH5P8gzOf4P3vZNz9PXl_Q3AhAfKuswO3_EBssnLGyur_K4_EAAAAAAAAAAAAAAAAAAAAHCw4VHSg",
		"Dilithium3",
		map[string]interface{}{"foo": "bar"},
		true,
	},
}

func TestDilithiumVerify(t *testing.T) {
	for _, data := range dilithiumTestData {
		var err error

		key, _ := os.ReadFile(data.keys["public"])

		publicKey, err := jwt.ParseDilithiumPublicKeyFromPEM(key)
		if err != nil {
			t.Errorf("Unable to parse Dilithium public key: %v", err)
		}

		parts := strings.Split(data.tokenString, ".")

		method := jwt.GetSigningMethod(data.alg)

		err = method.Verify(strings.Join(parts[0:2], "."), decodeSegment(t, parts[2]), publicKey)
		if data.valid && err != nil {
			t.Errorf("[%v] Error while verifying key: %v", data.name, err)
		}
		if !data.valid && err == nil {
			t.Errorf("[%v] Invalid key passed validation", data.name)
		}
	}
}

func TestDilithiumSign(t *testing.T) {
	for _, data := range dilithiumTestData {
		var err error
		key, _ := os.ReadFile(data.keys["private"])

		privateKey, err := jwt.ParseDilithiumPrivateKeyFromPEM(key)
		if err != nil {
			t.Errorf("Unable to parse Dilithium private key: %v", err)
		}

		parts := strings.Split(data.tokenString, ".")

		method := jwt.GetSigningMethod(data.alg)

		sig, err := method.Sign(strings.Join(parts[0:2], "."), privateKey)
		if err != nil {
			t.Errorf("[%v] Error signing token: %v", data.name, err)
		}

		ssig := encodeSegment(sig)
		if ssig == parts[2] && !data.valid {
			t.Errorf("[%v] Identical signatures\nbefore:\n%v\nafter:\n%v", data.name, parts[2], ssig)
		}
	}
}
