package jwt_test

import (
	"os"
	"strings"
	"testing"

	"github.com/yihao-chiu/jwt/v5"
)

var dilithiumTestData = []struct {
	name        string
	keys        map[string]string
	tokenString string
	alg         string
	claims      map[string]interface{}
	valid       bool
}{
	{
		"Dilithium2",
		map[string]string{"private": "test/dilithium2-private.pem", "public": "test/dilithium2-public.pem"},
		"eyJhbGciOiJDUllESTIiLCJ0eXAiOiJKV1QifQ.eyJmb28iOiJiYXIifQ.7619eceuji0FIuQqAfV_5EyKEofdy0JpHGH_qWq5yxWAzF9dm1YgKdNIevkup-SgCsmAscJpWvtfRuBwghEqGIRKfmOV1p8zVzb-ByBiKMVJ6KhqMarbmTJEGWGKMYsxX-PFLnPAYMjWuZFYCNwJfHJfjsZkDWpZjM9Q2Yk-gchurUjvAHD-nn5bG-C_Jyn6DbsrKDU74s8jfpYJgtWZDjC3_rYOosTPAUQmOSk_yTMCdPUtcIhzzHPXnfR3btVw88yr3xUmRxzQVjq5sDdL9mfejnFpkjdgrwnvFKJAFTtiBeUuwRarMJnxoOqDulGeTTNfPmLA72ZVzL2nrMuEJlivQ6C9Xi6texsW3gvPHPBZdc6g4wiIIaiQD1NiUBM4oCLXVM2MNXFjIE3qmo1u28f5fdqf6K1T06qgZJzAW6eXAx4-KuqETwlrOYVS9Fb1Zqc64q4MJRHD2dhOP-fiVSVxeE1BmYV94QUDRoXR4c_fFSbFlUj6yP63LPGFs8kXkI3puQDG33ox6E0p9hiW5ARSlAeX1IIxAI9BjW5WiWP8HqzLanM_aSgSC8zjBZo9y0w0uc7X_1I886OpcAZfqUge6dMmPS8uWIw6ftJJH7hdz_CcOg3eGT9ZwRXkCTIs8qwdOWqlTiCTPKzcoSq3iTULO0LDeOtChxMahgVmMAoJNH4pWZiGV9WNgFjGWkkSptC4_6q_vCH18YZ3RRdhE2WNDy6PbrRy0-E86lRbS7pTYUXeP8KlGuxLaXjm2toZEkKmDQRV6oQ2g3eTv27EwvQ8RP539kU7I8C_mQ9X-NOxtuQQHjyT2LU3HQGk9-8xEWr8uJsundcKNWome3sq7erKvP8jjJhhfNTEQ0Np6rv979oMrt5OhRnGmKWbRb_wkeY9hbTo7h6kOHyTGiqz36_QOKMyMc-lhtF9EgteIhHvAds1Z-WAtKzsbGwRYwmGsDo7tlSxFnP80DqHqmV-EbeeQE0Ampg7-9pGd3SFOdAJJ9_-mVKsGCFaSXiUAUBCcLvSsFYjfscwhD8Sx_UDQOM9ycqgDpszzzjCbH4lgVM-68QkPtiZLvfU07M9922PKnFaEw5Hzf0db9bViipvoTXmirojyFZ9zZPCDRr5jlac0ALm863sq0lN2iPKEhSTygTfMkUCS33Jt5sKktvJ5Qpzh9CMoqlt5QLE9WXDEZukIY8G2mhlNUtW_CHEDqn5xqr0cAFYMVEwAKhbKCYvZpaDqgerFzrpGyK2KlALrNKvNPUCIAu-JZprGdZzW0KF9cKZsuSL7rQAFh6La4YacI5M5c8rsuAJcjpKULqxONdgyt1lWgdImd1soIF4B5mSwbhmnWqMjnmRnRN8gXs0WlFuPITUW8bKs1YGOEcBYZSayjIj9M9r1VoghsQwsA30AA_K0aNRtPQ1fhEHKPCQNipg_datbbDVst3rUHgGh0Bpq7TAb84dfS8_chCzpbQCvfAvHqK9q21zDnjFxSVPg4iVPNKQVcHr9SNSqVI5UGLzu47xOO2OJrhA-8_8o9jwKo12BJRBuHvqvoqZmyfOrQiC67KeKrtOvig7LA1WTmt4w_Y2FFIOLgfp7518bGdxhAiI70CqYFSb9QKbzZKNK3m8nSn3_PJfPhRG43gKEUJJAZav1kzrntzZatrPjsRtSIEF70xglmF-yuAXoFNW2ic6JgSgXI_glEiShMe2XV5M3jfYEhg_8xfpOZiZGmHAinFH1Bj1PbfIEKgEffNvtQs5CumDQnm3BIgfHHKG_nG2KMn6tc313X1rhY52s_hJYBSNHxmjzACpDJjTNZ3321w9mDCadQAJoEa6hmlY9NNWRCEalKcc2848LnEkR4ysuilwdmiKimiQgmHgET1XT4UdQSWTC6OzSl09quOFhrGaoXX5Vwf1HGvHGg0MGs5Nz95Q0UepCN-UWmyXJj9FlLcxswC0ObPnEP0m4DAZTUIcv7ssoGR-QPYgyWcxisWD_qXfXaSbZV3fAK0LSsPNymhZeVo1gQCeHNx-4ZEwjfAr5Bl106EAFO46wB-PGTRA9yZFQyTUtueIfY-KuIvX-qQv4CHGSXrzVXpLsaSLgxaUVp2_lwB3WcNu6fCgteHKZtJbICgdPB3mHvMY3fL1yhPHAg_TXMvZ26FqayvqjSQzJhPaUx9V3TCw8xf4MwmzHVDXnrXyPCOJLIhJa_1YUN_oTQB9pFNe5Qu6ZoIuXs1053PiXubvL1J4URJhyombLyHIyWphJ8NBtCYjeFxpL5PmWijvt3yYG1FMny7AdKKI4inXlUeRrxorgNQy9BhyNrXewzwPEkNVXf2oqzcJnSF8bkIfA4gAEPuFkncQZr8xEjvj76znBP3GWQ71kmnfFcdUecnHWS9Agx6OFXdRdkvWGoVUJl1ExBZgGIWAmGyRHNLvbyaHEe8uUk69MOWeMph8fnZwBN2J_EMDHl4yyhSfdEWtDsDvNnqkfDZTGl2wK2vAxU5sgOuwIKIGJGVrc3mc00nrxdcSPSqonZgDRjNhBGw0BDFTelk2bOdlRY3_rj19oLIRXHTMpdp2tvhEClcHvuPqxfyAXW9MFJFzMd88DFiZCS0hadfu7ZF11A0itORsXEFmotNenvu-PghjZ8wBPd3mkhFpgmEQKi0GcAldEpT6MHmVfQtB3oDpZXObX6I0o7bxzHK4JUSh1EssKNEz3SW-yxnev084vglLLIhd3XtjfXMXS7hfChhoI4EjYMqQfKZsw0ydiVQJVLhqbAvW2k7uhvvzM-uaYWE9UV3PqzT6gFoNMJDhvFs4hlOOuL3OiuQF1cYl2SvByBWxRhLciRI70rl9o_Bh1zIX4xEPpJyA69Td62n_4MHwKRjCaRS7y-1AXVPVu43EG6tcWLX-6Vo3r-TOHCouKTG2wYBMzVYFfIHPalwUvmjlh4c8EQ5DNBQFyyPM5q0C2VaUyb9FJ3NkX3YVYuGgutDA1amnYs_SH5f48cPshcx1WEEw7leivh4XSd0lCYmwCaipWBvmO1TizHIM6FxSwo0DVzapJU1tdX1jexnq51E9swJTitmL4deiEB_6alz-ja2f5IRNl6OpC0GBgB86FBjMvXyamTPJvbqsCeRIJPf37BUDCRgZKzNlfpGfvcbP6u_-Bw0aJigrMEhUXpGfrK_CyM_V4e_0HCozSE1Tb6y7v8vX_QEVJyo8P0BVWFyMkprC3ujz-QAAAAAAAAAAAAAAABAlMkQ",
		"CRYDI2",
		map[string]interface{}{"foo": "bar"},
		true,
	},
	{
		"Dilithium3",
		map[string]string{"private": "test/dilithium3-private.pem", "public": "test/dilithium3-public.pem"},
		"eyJhbGciOiJDUllESTMiLCJ0eXAiOiJKV1QifQ.eyJmb28iOiJiYXIifQ.lz4kaVn4maXsW8alGOlfdUSWXsINq4BceHAATYhwhgwurCAugR6TNmEvX32vj5CObLw8bfa7HFfxfxUi1nOHkF2tkjzp8wDFBybnWhQDZNcDu2S1uqs1lVCUPIemsJ5TpIlN-FA8_t0B0lHJfoJ0n9O6jYL4zexHs6l1cv7Zxd6Vzh70O2XqsYeV9Pka-cPjPmSqTvvPO5vM4lXJIHBAp06uSrMeDr2M5FaRrAw39tO0Uz1C94qNpZYXcZRR0vFwZCr3SAUHMZoxny5XiGTD9Sf-mbwoZrRg7tdUXhshGog7zQVvclnDX--L05Qkd1225xxo22m8MhKBc50hReiEi8wBxFG9dieL6ouIsq_8lE_gsoFfdfmiCPQmT2ZZw9GEC5ODpHw6Wl5ssnxH2DIefj6QRINwFArT8DXDM1vTflKPhvccnWppl-34vOTbVsErqrFJrR5ootasSghTazR5j_jgJCBCVWo4my6fg6FbWRBwG7Le91K72AOfhHS5aiI1lfTLGJNedt9Nkq2qKQkqndYMI1h5zUq7ZpsBiamhkB70Ssg7RRotOQOTnz-TqtGZRNeu3Afc8JaJ5gA2kfzL2heJSM-FKd7Eq97GeoJVcO5bHD9OlhVBo80od5wfyk3GyTqbB1nDXYFT0pSy7EF8rG8Pg37-DT2AP4jQQs_MLdlxDzlEHpcOPh7BIFQGo_Td-_p9HJwe_zJp_AbRkXGIDdH6KMqOgrKh6DIDX9iU_9TFcZQsJ-eTJvZT2nvzhLdLbnt2iNuavfUNj-n-c4r-Uywzv31RBgAa1AebQFJ9F7gQKNRF6uiNFd0T1UQLifvOuuCZu3vepOQDhyuUqVJKpavdf-qAxAPrtkKq4e2DhUZthgntnuFyoOUtT9ks44hkO8nLWimMyYX99tW7PJoA8d-tlp_UpWGzRalpqM1mJ6aYkkIAAOlc_XTumYxel8L6ARAQQdODHqXtAoIOHg_x71R6AR23pq-r-DTmuikGWfx8-hw5280JyiKaUOYn7B354LFMwGhwNJ3XjUI21FyjZN0V9YeGnx3pPUU2G102eujTfUxaMrzccWPvLkBvKimtdp1WQrnPz2USOUfWgqkUSJjfmJ2JxtyuASV668mcoUxk9fnHxgfiN2wUnEGjb2j_20cNU7ATgP0gEqd9jtuJu3RO_Bp8KNYcD_2iuVSqUpqreAJLkGegJslKx9faol92IGXKS4VhRx7gZCwIhmPSF5c331KCb8WMyJYIpKECnOY5g1AC5OttKPA3OaeeZYhoDZ5kMaBPyyssywyYiDxkB3sWPZLvhvqXX9lYgPfJ4X_VQf0uKZPteVYWCddZfhyP-dL5hdGlcE8ubaXuD5J_X38iLOLwtppwW9dEN4GeDen4PWH6N_p9d3exI5Gaodb8BUdmpn63lWMl6OpmcHsRVL2EWi8v36xuIqTLnJJXE94VFQJVjxLNoof6zF7_aMGbgjW1nHugKpsWm1AZwd8Xw5d4DmhrVNpj81V9HOLU-XXUhKG-t7ed3Ocf8Itup7F-U94n7Hax6J2ji5wCEj07WQxxo9up6ambUyOTMjMlzyltny07NdSV9zGm5-2eVmkqgKVWcnUV_pGs0ngkgU2a4fIOV3jO_9fiaoDn4zb60PgSTxAP07pl7siMt_zrzGkbjqjYIhhXUiqHIUS5EF3noTQKm73P-MP_88S7vnLfJdZ5b8ZOUwbywMfoArxDceOsxI5rGd3ulApLKISsmoGMYk40SXUNYzLEJRmz6KdXLWngERABM-fHPN-x1Kmq-Y6COD55ZyP2aN1SmreTA8jUJDL-z13n8tEJtF2hzfjIPeiVyD1bRmJZ0rs87DbjSn-x8sxoDWXRnIW8vbOcp_fTqCEtAVzBCaHEYdQUOr__JTFeBhP-g28oW5ett2ehP05ga69Zd4nplzti2wSVTi_umWmWNVfqr8079JhchLke3KHaoKghlM5fII8bsp0Ck74JX-VHeI5e0uV7_HrQ3ra1TP75OsXZlnZYphAQhLN5STgUSBXqa_Ry5Ys2bk0YhyJc9CC1-KP2GKy7JrLWa1uPa3n5sXe9tb47qzsVXv_6Vvkg8ttBG-5Ngds44Sh5Q7QDAP8rd6oInR819q8RGTQh-L72L_rhVIVdpw6sXz8RjeoWNU842bvyAeyPLosydWfjNP5t0Hdc-Ijlg1TInHOGTLE_lb2Ggh-Ze5l3ND11v8hcacpIqicNUV7VT9vgHuYfdySl4xc4R29eHORczaMC0-nfpDNe6wuXHslFk9ZHO9EAw6yPt4h7J23aGKeaQyy0Lmdsem8WbWDMBnzaGv9f2IlHDMpe8XEVzPoD-oqDosz93-y08ikpAVPofhILAxvIorxMmrQhbYbiPLrYNJOyVWrSeQrt0cihZc5L0ZsgHqUoh8AcNl70XhHbefOzkcJIFgWT9tzNnVyVPeDrTpcHxQbiNsy2GEzeriKMJwuNqTtFYznPGpjt7Qybt4yet6PnkgW08jZ8COKvGZ6S-1NFBBwrXIGAQDepcZyNNSqym2qHagspBryhGTjqJ4Ga7h5EHGRKaIh-yu5zoSRMbZ-JMPzfi8RkrWAgTR7ZRanqiL1aqPRBShcgwKYIaq2QD_TIyWTzZ5gs65APThlfuYB1oLxNgYnjJukfZWX--TJTWAI12fPRMYMqulWbtmxGgMCrUcJAjY_-Ts-pr0ZCiIjKoDWVcj42zoxhwmdBwHfR6r0nXsHV47D5c_5mrWMwDjrSExVt5ZKgv4Z7uelaHhn6l_TsPhyYYeKi8ZFiSaJ5OkSPufktEyBA6WmcYUyVilAAjv7gwTHaNF8IamuwDtyO9DsTng0Rt9yR_ofLWPnK_9ZsRIFgKXspSk_twVFjLKbeUh8Mm8oAy-9KIJzJbg_Oah09NyP3hO3E_qdXBvP0OeLVk8UbHs32GIzcU1pPHurxc8P9IxoKM2gxUSIToYTBnMLyPkfA_bcbKFim-dgahypcAMEljbruMth32I6uzM3Kt34-FUouvZ3R0ycVHiAlU4tytdfRiTRJ92bq4TL8IG2g97vhqu4Ti64j62M7jhr1QtOyyK1c9Rzd69CgXeWif_jpqTvg6VmceK2evbjgr0v7BfCvpNIXZ5cfiaQ2eOKp9IeurGFZFqcfFE-K9AVXMpdP2Nnr7SQz2tExcdS3AYY6CcbQ6VCDTe95xrBpwqYqU2ZTy39D1OLO9VUIHWsnD-at005VZCao-jh7Evd1AfdnswpilKfhGOloDh2ULVgfjLxmUcwQvyYxdLV2sct82rfquxVo4aPaBX4FuZjodr5BZmMdIaGhT4l1bHTnJW-8jdwGoblhDYZm1rhMxemZV9EeoKpC3FAqrZRVe99Un3Qq5HYp1atGcVWpXBM-yE7RttfQlFlOmfz95oUBDm0ODmCNOfxizkz0-xWuip1f4XDBDkE28LvjiwzlUPxLHFP7YXBvUB1sCdRPj8YuCNAfFOGIGEUHGAQVGsp8zXDygDgUW62b1utZDuFMgQfN3qdMUbNCbkSHDy5V9-JJ5nVNhQHgKto32WIg69V3MKuiSxOxWR_mrqtFQ0FYFcXx4seQWJgOBFt9OGfms-yYa_orefbNqprObb_ddNuYE7tK0iHIPCUgHg4mlClIQe5JuM6zFCW0Az0oYQ588H7T-1TG2FAK-_cxnhFHHVZ_lm5LHUUliBTT39xWZDn55sz-_qg5Bc8nmdSdecYRwYf98z8YFDfPOMWO6zlWvGQRGMg-Ibhy2IVLDSFI_Dy939U5sdGYTjiiHGkt6jAft4jAfoCGUBTD8hEhF4AHWWvAFnxwZZ2KZ4jZ3H11p9c6ujghEI6XUxglSQqPIcUOwq-bblnFSYKU3Q9cxrAEmroEjmn8KRj6M7BlYrxKHwxo4MakZdIXM-f72rK_wkeDURvCP90ew4Euj5gUR0-_WOEZvW5btt1vZ-hNA1zTtHFCZuOBAnURhG4UURk_DmFeZQ5A2T350HMa04I2JFR6IaEWHIL140XUQ4ePzKfIajQnfbxtKVb_XIHYKEj9kbjBDFig2noyu7ZDONzKBx4IRdy8BPD5pAcdLJNAACjpgz19fX2J1bfOKylXTNTYnZW9wRLjvEMk5diw6m0kv-nir_Yzw_K_FxTfEQOOZsA_H2-KWxv4KU4DJOqa2v6YkUDyeAWHH76nJckcYjv6VdX-I9lZPhnQB1mQRoXta_PQw95oxngKwD_ODdlMKVGES5pDIr7GpPddzWepoUqGNB7SBOPUA4bCG2hc-WjJR3L2aKJX1qqY4jlM9zzNTZWNHzpiCHcc_U8z-goPJj9MdqgLUVldap2isfQKJS5KlL_3-Wp2r8bsFCxJep2u0eceNTlogYblAAAAAAAAAAAAAAAHEBgdJSw",
		"CRYDI3",
		map[string]interface{}{"foo": "bar"},
		true,
	},
}

func TestDilithiumVerify(t *testing.T) {
	for _, data := range dilithiumTestData {
		var err error

		key, _ := os.ReadFile(data.keys["public"])

		publicKey, err := jwt.ParseDilithiumPublicKeyFromPEM(key)
		if err != nil {
			t.Errorf("Unable to parse Dilithium public key: %v", err)
		}

		parts := strings.Split(data.tokenString, ".")

		method := jwt.GetSigningMethod(data.alg)

		err = method.Verify(strings.Join(parts[0:2], "."), decodeSegment(t, parts[2]), publicKey)
		if data.valid && err != nil {
			t.Errorf("[%v] Error while verifying key: %v", data.name, err)
		}
		if !data.valid && err == nil {
			t.Errorf("[%v] Invalid key passed validation", data.name)
		}
	}
}

func TestDilithiumSign(t *testing.T) {
	for _, data := range dilithiumTestData {
		var err error
		key, _ := os.ReadFile(data.keys["private"])

		privateKey, err := jwt.ParseDilithiumPrivateKeyFromPEM(key)
		if err != nil {
			t.Errorf("Unable to parse Dilithium private key: %v", err)
		}

		parts := strings.Split(data.tokenString, ".")

		method := jwt.GetSigningMethod(data.alg)

		sig, err := method.Sign(strings.Join(parts[0:2], "."), privateKey)
		if err != nil {
			t.Errorf("[%v] Error signing token: %v", data.name, err)
		}

		ssig := encodeSegment(sig)
		if ssig == parts[2] && !data.valid {
			t.Errorf("[%v] Identical signatures\nbefore:\n%v\nafter:\n%v", data.name, parts[2], ssig)
		}
	}
}
